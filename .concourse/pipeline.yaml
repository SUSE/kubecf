resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: github-status
  type: docker-image
  source:
    repository: resource/github-status
    tag: release

resources:
- name: kubecf-master
  type: git
  source:
    branch: master
    uri: https://github.com/SUSE/kubecf

- name: kubecf-pr
  type: pull-request
  check_every: 10m
  source:
    repository: SUSE/kubecf
    access_token: ((github-access-token))
    labels: ["Trigger: CI"]
    disable_forks: false

- name: catapult
  type: git
  source:
    uri: https://github.com/SUSE/catapult
  version:
    ref: 05b6a6ff325993a3f97f173b6c048af416a0274a

- name: status.src
  type: github-status
  source:
    repo: SUSE/kubecf
    access_token: ((github-access-token))

- name: s3.kubecf
  type: s3
  source:
    bucket: kubecf-ci
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: eu-central-1
    regexp: kubecf-v(.*).tgz

- name: s3.kubecf-bundle
  type: s3
  source:
    bucket: kubecf-ci
    access_key_id: ((aws-access-key))
    secret_access_key: ((aws-secret-key))
    region_name: eu-central-1
    regexp: kubecf-bundle-v(.*).tgz

deploy_args: &deploy_args
- -xce
- |
  export SCF_LOCAL=$PWD/kubecf
  export SCF_CHART="$(readlink -f s3.kubecf/*.tgz)"
  pushd catapult
  export SCF_OPERATOR=true
  export FORCE_DELETE=true
  export SCF_TESTGROUP=true
  export BACKEND=ekcp
  export DOCKER_ORG=cap-staging
  export QUIET_OUTPUT=true
  # Bring up a k8s cluster and builds+deploy kubecf
  # See: https://github.com/SUSE/catapult/wiki/Build-and-run-SCF#build-and-run-kubecf
  make k8s scf

test_args: &test_args
- -xce
- |
  export BACKEND=ekcp
  export KUBECF_TEST_SUITE="${TEST_SUITE:-smokes}"
  export KUBECF_NAMESPACE="scf"
  export KUBECF_CHECKOUT="$PWD/kubecf"
  export QUIET_OUTPUT=true
  pushd catapult
  # Grabs back a deployed cluster and runs test suites on it
  # See: https://github.com/SUSE/catapult/wiki/Running-SCF-tests#kubecf
  make recover tests-kubecf


jobs:
# PRs

- name: lint-pr
  public: true
  plan:
  - get: kubecf-pr
    trigger: true
  - put: kubecf-pr
    params:
      path: kubecf-pr
      context: lint-pr
      status: pending
  - task: lint-pr
    input_mapping:
      kubecf: kubecf-pr
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: kubecf
      run:
        path: "/bin/bash"
        args:
        - -xce
        - |
          cd kubecf
          ./dev/linters/shellcheck.sh
          ./dev/linters/yamllint.sh
          ./dev/linters/helmlint.sh
    on_success:
      put: kubecf-pr
      params: &success-pr
        path: kubecf-pr
        context: lint-pr
        status: success
    on_failure:
      put: kubecf-pr
      params: &failure-pr
        path: kubecf-pr
        context: lint-pr
        status: failure

- name: build-pr
  public: false # TODO: public or not?
  plan:
  - get: kubecf-pr
    passed:
    - lint-pr
    trigger: true
  - put: kubecf-pr
    params:
      path: kubecf-pr
      status: pending
      context: build-pr
  - task: build-pr
    input_mapping:
      kubecf: kubecf-pr
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: kubecf
      outputs:
      - name: output
      run:
        path: "/bin/bash"
        args:
        - -xce
        - |
          cd kubecf
          ./dev/build.sh ../output
    on_success:
      put: kubecf-pr
      params:
        <<: *success-pr
        context: build-pr
    on_failure:
      put: kubecf-pr
      params:
        <<: *failure-pr
        context: build-pr
  - put: s3.kubecf
    params:
      file: output/kubecf-v*.tgz
      acl: public-read
  - put: s3.kubecf-bundle
    params:
      file: output/kubecf-bundle-v*.tgz
      acl: public-read

- name: deploy-diego-pr
  serial_groups: [diego-pr]
  public: true
  plan:
  - get: s3.kubecf
    passed:
    - build-pr
    trigger: true
  - get: kubecf-pr
  - get: catapult
  - put: kubecf-pr
    params:
      path: kubecf-pr
      status: pending
      context: deploy-diego-pr
  - task: deploy
    privileged: true
    timeout: 2h30m
    input_mapping:
      kubecf: kubecf-pr
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: kubecf
      - name: catapult
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        QUIET_OUTPUT: true
        ENABLE_EIRINI: false
        CLUSTER_NAME: kubecf-diego-pr
      run:
        path: "/bin/bash"
        args: *deploy_args
    on_success:
      put: kubecf-pr
      params:
        <<: *success-pr
        context: deploy-diego-pr
    on_failure:
      put: kubecf-pr
      params:
        <<: *failure-pr
        context: deploy-diego-pr

- name: smoke-tests-diego-pr
  serial_groups: [diego-pr]
  public: true
  plan:
  - get: kubecf-pr
    passed:
    - deploy-diego-pr
    trigger: true
  - get: catapult
  - put: kubecf-pr
    params:
      path: kubecf-pr
      status: pending
      context: smoke-tests-diego-pr
  - task: test-diego
    privileged: true
    timeout: 1h30m
    input_mapping:
      kubecf: kubecf-pr
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: smokes
        CLUSTER_NAME: kubecf-diego-pr
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: kubecf-pr
      params:
        <<: *success-pr
        context: smoke-tests-diego-pr
    on_failure:
      put: kubecf-pr
      params:
        <<: *failure-pr
        context: smoke-tests-diego-pr

- name: cf-acceptance-tests-diego-pr
  serial_groups: [diego-pr]
  public: true
  plan:
  - get: kubecf-pr
    passed:
    - smoke-tests-diego-pr
    trigger: true
  - get: catapult
  - put: kubecf-pr
    params:
      path: kubecf-pr
      status: pending
      context: cf-acceptance-tests-diego-pr
  - task: test-diego
    privileged: true
    input_mapping:
      kubecf: kubecf-pr
    timeout: 5h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: cats
        CLUSTER_NAME: kubecf-diego-pr
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: kubecf-pr
      params:
        <<: *success-pr
        context: cf-acceptance-tests-diego-pr
    on_failure:
      put: kubecf-pr
      params:
        <<: *failure-pr
        context: cf-acceptance-tests-diego-pr

# Eirini

- name: deploy-eirini-pr
  serial_groups: [eirini-pr]
  public: true
  plan:
  - get: s3.kubecf
    passed:
    - build-pr
    trigger: true
  - get: kubecf-pr
  - get: catapult
  - put: kubecf-pr
    params:
      path: kubecf-pr
      status: pending
      context: deploy-eirini-pr
  - task: deploy
    timeout: 2h30m
    privileged: true
    input_mapping:
      kubecf: kubecf-pr
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: kubecf
      - name: catapult
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        ENABLE_EIRINI: true
        CLUSTER_NAME: kubecf-eirini-pr
      run:
        path: "/bin/bash"
        args: *deploy_args
    on_success:
      put: kubecf-pr
      params:
        <<: *success-pr
        context: deploy-eirini-pr
    on_failure:
      put: kubecf-pr
      params:
        <<: *failure-pr
        context: deploy-eirini-pr

- name: smoke-tests-eirini-pr
  serial_groups: [eirini-pr]
  public: true
  plan:
  - get: kubecf-pr
    passed:
    - deploy-eirini-pr
    trigger: true
  - get: catapult
  - put: kubecf-pr
    params:
      path: kubecf-pr
      status: pending
      context: smoke-tests-eirini-pr
  - task: test
    privileged: true
    input_mapping:
      kubecf: kubecf-pr
    timeout: 1h30m
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      outputs:
      - name: mail-output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: smokes
        CLUSTER_NAME: kubecf-eirini-pr
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: kubecf-pr
      params:
        <<: *success-pr
        context: smoke-tests-eirini-pr
    on_failure:
      put: kubecf-pr
      params:
        <<: *failure-pr
        context: smoke-tests-eirini-pr

- name: cf-acceptance-tests-eirini-pr
  serial_groups: [eirini-pr]
  public: true
  plan:
  - get: kubecf-pr
    passed:
    - smoke-tests-eirini-pr
    trigger: true
  - get: catapult
  - put: kubecf-pr
    params:
      path: kubecf-pr
      status: pending
      context: cf-acceptance-tests-eirini-pr
  - task: test
    timeout: 5h30m
    privileged: true
    input_mapping:
      kubecf: kubecf-pr
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf-pr
      outputs:
      - name: mail-output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: cats
        CLUSTER_NAME: kubecf-eirini-pr
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: kubecf-pr
      params:
        <<: *success-pr
        context: cf-acceptance-tests-eirini-pr
    on_failure:
      put: kubecf-pr
      params:
        <<: *failure-pr
        context: cf-acceptance-tests-eirini-pr

# Master

- name: lint-master
  public: true
  plan:
  - get: kubecf-master
    trigger: true
  - put: status.src
    params: &lint-master
      context: lint-master
      description: "Linting"
      path: kubecf-master/.git/short_ref
      state: pending
  - task: lint-master
    input_mapping:
      kubecf: kubecf-master
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: kubecf
      run:
        path: "/bin/bash"
        args:
        - -xce
        - |
          cd kubecf
          ./dev/linters/shellcheck.sh
          ./dev/linters/yamllint.sh
          ./dev/linters/helmlint.sh
    on_success:
      put: status.src
      params:
        <<: *lint-master
        state: success
    on_failure:
      put: status.src
      params:
        <<: *lint-master
        state: failure

- name: build-master
  public: false # TODO: public or not?
  plan:
  - get: kubecf-master
    passed:
    - lint-master
    trigger: true
  - put: status.src
    params: &build-master
      context: build-master
      description: "Building"
      path: kubecf-master/.git/short_ref
      state: pending
  - task: build-master
    input_mapping:
      kubecf: kubecf-master
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: thulioassis/bazel-docker-image
          tag: 2.0.0
      inputs:
      - name: kubecf
      outputs:
      - name: output
      run:
        path: "/bin/bash"
        args:
        - -xce
        - |
          cd kubecf
          ./dev/build.sh ../output
    on_success:
      put: status.src
      params:
        <<: *build-master
        state: success
    on_failure:
      put: status.src
      params:
        <<: *build-master
        state: failure
  - put: s3.kubecf
    params:
      file: output/kubecf-v*.tgz
      acl: public-read
  - put: s3.kubecf-bundle
    params:
      file: output/kubecf-bundle-v*.tgz
      acl: public-read

- name: deploy-diego-master
  serial_groups: [diego-master]
  public: true
  plan:
  - get: s3.kubecf
    passed:
    - build-master
    trigger: true
  - get: kubecf-master
  - get: catapult
  - put: status.src
    params: &diego_deploy
      context: deploy-diego-master
      description: "Diego deploy"
      path: kubecf-master/.git/short_ref
      state: pending
  - task: deploy
    privileged: true
    timeout: 2h30m
    input_mapping:
      kubecf: kubecf-master
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: kubecf
      - name: catapult
      - name: s3.kubecf
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        QUIET_OUTPUT: true
        ENABLE_EIRINI: false
        CLUSTER_NAME: kubecf-diego-master
      run:
        path: "/bin/bash"
        args: *deploy_args
    on_success:
      put: status.src
      params:
        <<: *diego_deploy
        state: success
    on_failure:
      put: status.src
      params:
        <<: *diego_deploy
        state: failure

- name: smoke-tests-diego-master
  serial_groups: [diego-master]
  public: true
  plan:
  - get: kubecf-master
    passed:
    - deploy-diego-master
    trigger: true
  - get: catapult
  - put: status.src
    params: &diego_smoke
      context: smoke-diego
      description: "Diego smoke"
      path: kubecf-master/.git/short_ref
      state: pending
  - task: test-diego
    privileged: true
    timeout: 1h30m
    input_mapping:
      kubecf: kubecf-master
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: smokes
        CLUSTER_NAME: kubecf-diego-master
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: status.src
      params:
        <<: *diego_smoke
        state: success
    on_failure:
      put: status.src
      params:
        <<: *diego_smoke
        state: failure

- name: cf-acceptance-tests-diego-master
  serial_groups: [diego-master]
  public: true
  plan:
  - get: kubecf-master
    passed:
    - smoke-tests-diego-master
    trigger: true
  - get: catapult
  - put: status.src
    params: &diego_cats
      context: cats-diego
      description: "Diego cats"
      path: kubecf-master/.git/short_ref
      state: pending
  - task: test-diego
    privileged: true
    timeout: 5h30m
    input_mapping:
      kubecf: kubecf-master
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: cats
        CLUSTER_NAME: kubecf-diego-master
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: status.src
      params:
        <<: *diego_cats
        state: success
    on_failure:
      put: status.src
      params:
        <<: *diego_cats
        state: failure

# Eirini

- name: deploy-eirini-master
  serial_groups: [eirini-master]
  public: true
  plan:
  - get: s3.kubecf
    passed:
    - build-master
    trigger: true
  - get: kubecf-master
  - get: catapult
  - put: status.src
    params: &eirini_deploy
      context: deploy-eirini-master
      description: "Eirini Deploy"
      path: kubecf-master/.git/short_ref
      state: pending
  - task: deploy
    timeout: 2h30m
    privileged: true
    input_mapping:
      kubecf: kubecf-master
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: kubecf
      - name: catapult
      - name: s3.kubecf
      outputs:
      - name: output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        ENABLE_EIRINI: true
        CLUSTER_NAME: kubecf-eirini-master
      run:
        path: "/bin/bash"
        args: *deploy_args
    on_success:
      put: status.src
      params:
        <<: *eirini_deploy
        state: success
    on_failure:
      put: status.src
      params:
        <<: *eirini_deploy
        state: failure

- name: smoke-tests-eirini-master
  serial_groups: [eirini-master]
  public: true
  plan:
  - get: kubecf-master
    passed:
    - deploy-eirini-master
    trigger: true
  - get: catapult
  - put: status.src
    params: &eirini_smoke
      context: smoke-eirini
      description: "Eirini smoke"
      path: kubecf-master/.git/short_ref
      state: pending
  - task: test
    privileged: true
    timeout: 1h30m
    input_mapping:
      kubecf: kubecf-master
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      outputs:
      - name: mail-output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: smokes
        CLUSTER_NAME: kubecf-eirini-master
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: status.src
      params:
        <<: *eirini_smoke
        state: success
    on_failure:
      put: status.src
      params:
        <<: *eirini_smoke
        state: failure

- name: cf-acceptance-tests-eirini-master
  serial_groups: [eirini-master]
  public: true
  plan:
  - get: kubecf-master
    passed:
    - smoke-tests-eirini-master
    trigger: true
  - get: catapult
  - put: status.src
    params: &eirini_cats
      context: cats-eirini
      description: "Eirini CATs"
      path: kubecf-master/.git/short_ref
      state: pending
  - task: test
    timeout: 5h30m
    input_mapping:
      kubecf: kubecf-master
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: splatform/catapult
      inputs:
      - name: catapult
      - name: kubecf
      outputs:
      - name: mail-output
      params:
        DEFAULT_STACK: cflinuxfs3
        EKCP_HOST: ((ekcp-host))
        TEST_SUITE: cats
        CLUSTER_NAME: kubecf-eirini-master
      run:
        path: "/bin/bash"
        args: *test_args
    on_success:
      put: status.src
      params:
        <<: *eirini_cats
        state: success
    on_failure:
      put: status.src
      params:
        <<: *eirini_cats
        state: failure
